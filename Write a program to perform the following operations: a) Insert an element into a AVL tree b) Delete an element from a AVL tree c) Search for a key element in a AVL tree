#include <stdio.h>
#include <stdlib.h>
struct TreeNode {
    int key;
    struct TreeNode *left;
    struct TreeNode *right;
    int height;
};
int height(struct TreeNode *node) {
    if (node == NULL)
        return 0;
    return node->height;  
}
int max(int a, int b) {
    return (a > b) ? a : b;
}
struct TreeNode *newNode(int key) {
    struct TreeNode *node = (struct TreeNode *)malloc(sizeof(struct TreeNode));
    node->key = key;
    node->left = NULL;
    node->right = NULL;
    node->height = 1; 
    return node;
}
struct TreeNode *rightRotate(struct TreeNode *y) {
    struct TreeNode *x = y->left;
    struct TreeNode *T2 = x->right;
    x->right = y;
    y->left = T2;
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;
 return x;
}
struct TreeNode *leftRotate(struct TreeNode *x) {
    struct TreeNode *y = x->right;
    struct TreeNode *T2 = y->left;
    y->left = x;
    x->right = T2;
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;
   return y;
}
int getBalance(struct TreeNode *node) {
    if (node == NULL)
        return 0;
    return height(node->left) - height(node->right);
}
struct TreeNode *insert(struct TreeNode *node, int key) {
    if (node == NULL)
        return newNode(key);

    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else 
        return node;
 node->height = 1 + max(height(node->left), height(node->right));
    int balance = getBalance(node);
    if (balance > 1 && key < node->left->key)
        return rightRotate(node);
    if (balance < -1 && key > node->right->key)
        return leftRotate(node);
    if (balance > 1 && key > node->left->key) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }
    if (balance < -1 && key < node->right->key) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }
    return node;
}
struct TreeNode *minValueNode(struct TreeNode *node) {
    struct TreeNode *current = node;
    while (current->left != NULL)
        current = current->left;
    return current;
}
struct TreeNode *deleteNode(struct TreeNode *root, int key) {
    if (root == NULL)
        return root;
    if (key < root->key)
        root->left = deleteNode(root->left, key);
    else if (key > root->key)
        root->right = deleteNode(root->right, key);
    else {
        if ((root->left == NULL) || (root->right == NULL)) {
            struct TreeNode *temp = root->left ? root->left : root->right;
            if (temp == NULL) {
                temp = root;
                root = NULL;
            } else 
                *root = *temp; 
            free(temp);
        } else {
            struct TreeNode *temp = minValueNode(root->right);
            root->key = temp->key;
            root->right = deleteNode(root->right, temp->key);
        }
    }
    if (root == NULL)
        return root;
    root->height = 1 + max(height(root->left), height(root->right));
    int balance = getBalance(root);
    if (balance > 1 && getBalance(root->left) >= 0)
        return rightRotate(root);
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    if (balance < -1 && getBalance(root->right) <= 0)
        return leftRotate(root);
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }
    return root;
}
struct TreeNode *search(struct TreeNode *root, int key) {
if (root == NULL || root->key == key)
        return root;
    if (root->key < key)
        return search(root->right, key);
    return search(root->left, key);
}
void inorder(struct TreeNode *root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->key);
        inorder(root->right);
    }
}
int main() {
    struct TreeNode *root = NULL;
  root = insert(root, 10);
    root = insert(root, 20);
    root = insert(root, 30);
    root = insert(root, 40);
    root = insert(root, 50);
    printf("AVL tree after insertion:\n");
    inorder(root);
    printf("\n");
    int searchKey = 30;
    struct TreeNode *searchResult = search(root, searchKey);
    if (searchResult != NULL)
        printf("Key %d found in the AVL tree.\n", searchKey);
    else
        printf("Key %d not found in the AVL tree.\n", searchKey);
    int deleteKey = 20;
    root = deleteNode(root, deleteKey);
    printf("AVL tree after deletion of key %d:\n", deleteKey);
    inorder(root);
    printf("\n");
    return 0;
}
